/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/context": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.context.id"];
          project_id?: parameters["rowFilter.context.project_id"];
          name?: parameters["rowFilter.context.name"];
          slug?: parameters["rowFilter.context.slug"];
          uuid?: parameters["rowFilter.context.uuid"];
          type?: parameters["rowFilter.context.type"];
          created_at?: parameters["rowFilter.context.created_at"];
          database?: parameters["rowFilter.context.database"];
          data_schema?: parameters["rowFilter.context.data_schema"];
          topo_schema?: parameters["rowFilter.context.topo_schema"];
          srid?: parameters["rowFilter.context.srid"];
          tolerance?: parameters["rowFilter.context.tolerance"];
          bounds?: parameters["rowFilter.context.bounds"];
          parent?: parameters["rowFilter.context.parent"];
          parent_geom?: parameters["rowFilter.context.parent_geom"];
          offset_x?: parameters["rowFilter.context.offset_x"];
          offset_y?: parameters["rowFilter.context.offset_y"];
          is_main_context?: parameters["rowFilter.context.is_main_context"];
          project_slug?: parameters["rowFilter.context.project_slug"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["context"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
  };
  "/project": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.project.id"];
          slug?: parameters["rowFilter.project.slug"];
          uuid?: parameters["rowFilter.project.uuid"];
          title?: parameters["rowFilter.project.title"];
          description?: parameters["rowFilter.project.description"];
          created_at?: parameters["rowFilter.project.created_at"];
          owner_id?: parameters["rowFilter.project.owner_id"];
          srid?: parameters["rowFilter.project.srid"];
          main_context?: parameters["rowFilter.project.main_context"];
          main_context_slug?: parameters["rowFilter.project.main_context_slug"];
          n_contexts?: parameters["rowFilter.project.n_contexts"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["project"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
  };
  "/users": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.users.id"];
          created_at?: parameters["rowFilter.users.created_at"];
          username?: parameters["rowFilter.users.username"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["users"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** users */
          users?: definitions["users"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.users.id"];
          created_at?: parameters["rowFilter.users.created_at"];
          username?: parameters["rowFilter.users.username"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.users.id"];
          created_at?: parameters["rowFilter.users.created_at"];
          username?: parameters["rowFilter.users.username"];
        };
        body: {
          /** users */
          users?: definitions["users"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
}

export interface definitions {
  context: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id?: number;
    /**
     * Format: integer
     * @description Note:
     * This is a Foreign Key to `project.id`.<fk table='project' column='id'/>
     */
    project_id?: number;
    /** Format: text */
    name?: string;
    /** Format: text */
    slug?: string;
    /** Format: uuid */
    uuid?: string;
    /**
     * Format: mapboard.context_type
     * @enum {string}
     */
    type?: "map" | "cross-section";
    /** Format: timestamp without time zone */
    created_at?: string;
    /** Format: text */
    database?: string;
    /** Format: text */
    data_schema?: string;
    /** Format: text */
    topo_schema?: string;
    /** Format: integer */
    srid?: number;
    /** Format: numeric */
    tolerance?: number;
    /** Format: public.geometry(MultiPolygon) */
    bounds?: string;
    /**
     * Format: integer
     * @description Note:
     * This is a Foreign Key to `context.id`.<fk table='context' column='id'/>
     */
    parent?: number;
    /** Format: public.geometry */
    parent_geom?: string;
    /** Format: numeric */
    offset_x?: number;
    /** Format: numeric */
    offset_y?: number;
    /** Format: boolean */
    is_main_context?: boolean;
    /** Format: text */
    project_slug?: string;
  };
  project: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id?: number;
    /** Format: text */
    slug?: string;
    /** Format: uuid */
    uuid?: string;
    /** Format: text */
    title?: string;
    /** Format: text */
    description?: string;
    /** Format: timestamp without time zone */
    created_at?: string;
    /**
     * Format: integer
     * @description Note:
     * This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
     */
    owner_id?: number;
    /** Format: integer */
    srid?: number;
    /**
     * Format: integer
     * @description Note:
     * This is a Foreign Key to `context.id`.<fk table='context' column='id'/>
     */
    main_context?: number;
    /** Format: text */
    main_context_slug?: string;
    /** Format: bigint */
    n_contexts?: number;
  };
  users: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id?: number;
    /** Format: timestamp without time zone */
    created_at?: string;
    /** Format: text */
    username?: string;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferPost:
    | "return=representation"
    | "return=minimal"
    | "return=none"
    | "resolution=ignore-duplicates"
    | "resolution=merge-duplicates";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description context */
  "body.context": definitions["context"];
  "rowFilter.context.id": string;
  "rowFilter.context.project_id": string;
  "rowFilter.context.name": string;
  "rowFilter.context.slug": string;
  "rowFilter.context.uuid": string;
  "rowFilter.context.type": string;
  "rowFilter.context.created_at": string;
  "rowFilter.context.database": string;
  "rowFilter.context.data_schema": string;
  "rowFilter.context.topo_schema": string;
  "rowFilter.context.srid": string;
  "rowFilter.context.tolerance": string;
  "rowFilter.context.bounds": string;
  "rowFilter.context.parent": string;
  "rowFilter.context.parent_geom": string;
  "rowFilter.context.offset_x": string;
  "rowFilter.context.offset_y": string;
  "rowFilter.context.is_main_context": string;
  "rowFilter.context.project_slug": string;
  /** @description project */
  "body.project": definitions["project"];
  "rowFilter.project.id": string;
  "rowFilter.project.slug": string;
  "rowFilter.project.uuid": string;
  "rowFilter.project.title": string;
  "rowFilter.project.description": string;
  "rowFilter.project.created_at": string;
  "rowFilter.project.owner_id": string;
  "rowFilter.project.srid": string;
  "rowFilter.project.main_context": string;
  "rowFilter.project.main_context_slug": string;
  "rowFilter.project.n_contexts": string;
  /** @description users */
  "body.users": definitions["users"];
  "rowFilter.users.id": string;
  "rowFilter.users.created_at": string;
  "rowFilter.users.username": string;
}

export interface operations {}

export interface external {}
